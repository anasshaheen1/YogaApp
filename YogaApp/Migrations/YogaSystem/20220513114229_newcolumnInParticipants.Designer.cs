// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YogaApp.Models;

#nullable disable

namespace YogaApp.Migrations.YogaSystem
{
    [DbContext(typeof(YogaSystemContext))]
    [Migration("20220513114229_newcolumnInParticipants")]
    partial class newcolumnInParticipants
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.ApprovalStatusLkp", b =>
                {
                    b.Property<int>("ApprovalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApprovalStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApprovalStatusId"), 1L, 1);

                    b.Property<string>("ApprovalStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ApprovalStatusId");

                    b.ToTable("ApprovalStatusLkp", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("YogaApp.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("YogaApp.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("YogaApp.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("YogaApp.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("YogaApp.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("YogaApp.Models.ClassParticipantLink", b =>
                {
                    b.Property<int>("ClassParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClassParticipantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassParticipantId"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("ClassID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnrollmentStatusId")
                        .HasColumnType("int")
                        .HasColumnName("EnrollmentStatusID");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantID");

                    b.HasKey("ClassParticipantId");

                    b.HasIndex("ClassId");

                    b.HasIndex("EnrollmentStatusId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ClassParticipantLink", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int?>("PreviousOfferingCourseId")
                        .HasColumnType("int")
                        .HasColumnName("PreviousOfferingCourseID");

                    b.Property<decimal?>("PricePerSession")
                        .HasColumnType("money");

                    b.Property<string>("RequiredExpertise")
                        .HasColumnType("text");

                    b.Property<int?>("SessionCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("CourseId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.CourseStatusLkp", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("CourseStatusLkp", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.EnrollmentStatusLkp", b =>
                {
                    b.Property<int>("EnrollmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EnrollmentStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentStatusId"), 1L, 1);

                    b.Property<string>("EntrollmentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EnrollmentStatusId");

                    b.ToTable("EnrollmentStatusLkp", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("text");

                    b.Property<string>("Heading")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("image");

                    b.HasKey("InstructorId");

                    b.ToTable("Instructor", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<string>("AddressFull")
                        .HasColumnType("text");

                    b.Property<string>("AddressPostcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OpeningTimes")
                        .HasColumnType("text");

                    b.HasKey("LocationId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.LocationAdministratorLink", b =>
                {
                    b.Property<int>("AdministratorId")
                        .HasColumnType("int")
                        .HasColumnName("AdministratorID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.HasKey("AdministratorId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationAdministratorLink", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.LocationClassLink", b =>
                {
                    b.Property<int>("LocationClassLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationClassLinkID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationClassLinkId"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("ClassID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.HasKey("LocationClassLinkId");

                    b.ToTable("LocationClassLink", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.LocationInstructorLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApprovalBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ApprovalStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ApprovalStatusID");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<DateTime?>("RemovalDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationInstructorLink", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.Participant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ParticipantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipantId"), 1L, 1);

                    b.Property<string>("AboutMe")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("YogaUserId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantId");

                    b.ToTable("Participant", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<short?>("Rating")
                        .HasColumnType("smallint");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<bool?>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("ReviewId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.Transaction", b =>
                {
                    b.Property<int>("Tid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tid"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantID");

                    b.Property<DateTime?>("TriggerDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TriggerdBy")
                        .HasColumnType("int");

                    b.Property<int?>("TstatusId")
                        .HasColumnType("int")
                        .HasColumnName("TStatusID");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Tid");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TstatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.TransactionStatusLkp", b =>
                {
                    b.Property<int>("TransactionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionStatusId"), 1L, 1);

                    b.Property<string>("TransactionStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransactionStatusId");

                    b.ToTable("TransactionStatusLkp", (string)null);
                });

            modelBuilder.Entity("YogaApp.Models.TransactionTypeLkp", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionTypeId"), 1L, 1);

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypeLkp", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("YogaApp.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaApp.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YogaApp.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("YogaApp.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YogaApp.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("YogaApp.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YogaApp.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("YogaApp.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YogaApp.Models.AspNetUserToken", b =>
                {
                    b.HasOne("YogaApp.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YogaApp.Models.ClassParticipantLink", b =>
                {
                    b.HasOne("YogaApp.Models.Course", "Class")
                        .WithMany("ClassParticipantLinks")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassParticipantLink_Course");

                    b.HasOne("YogaApp.Models.EnrollmentStatusLkp", "EnrollmentStatus")
                        .WithMany("ClassParticipantLinks")
                        .HasForeignKey("EnrollmentStatusId")
                        .HasConstraintName("FK_ClassParticipantLink_EnrollmentStatusLkp");

                    b.HasOne("YogaApp.Models.Participant", "Participant")
                        .WithMany("ClassParticipantLinks")
                        .HasForeignKey("ParticipantId")
                        .HasConstraintName("FK_ClassParticipantLink_Participant");

                    b.Navigation("Class");

                    b.Navigation("EnrollmentStatus");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("YogaApp.Models.Course", b =>
                {
                    b.HasOne("YogaApp.Models.Location", "Location")
                        .WithMany("Courses")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Course_Location");

                    b.HasOne("YogaApp.Models.CourseStatusLkp", "Status")
                        .WithMany("Courses")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Course_CourseStatusLkp");

                    b.Navigation("Location");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("YogaApp.Models.LocationAdministratorLink", b =>
                {
                    b.HasOne("YogaApp.Models.Location", "Location")
                        .WithMany("LocationAdministratorLinks")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_LocationAdministratorLink_Location");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("YogaApp.Models.LocationInstructorLink", b =>
                {
                    b.HasOne("YogaApp.Models.ApprovalStatusLkp", "ApprovalStatus")
                        .WithMany("LocationInstructorLinks")
                        .HasForeignKey("ApprovalStatusId")
                        .HasConstraintName("FK_LocationInstructorLink_ApprovalStatusLkp");

                    b.HasOne("YogaApp.Models.Instructor", "Instructor")
                        .WithMany("LocationInstructorLinks")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_LocationInstructorLink_Instructor");

                    b.HasOne("YogaApp.Models.Location", "Location")
                        .WithMany("LocationInstructorLinks")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_LocationInstructorLink_Location");

                    b.Navigation("ApprovalStatus");

                    b.Navigation("Instructor");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("YogaApp.Models.Review", b =>
                {
                    b.HasOne("YogaApp.Models.Instructor", "Instructor")
                        .WithMany("Reviews")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_Review_Instructor");

                    b.HasOne("YogaApp.Models.Location", "Location")
                        .WithMany("Reviews")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Review_Location");

                    b.HasOne("YogaApp.Models.Participant", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Review_Participant");

                    b.Navigation("Instructor");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YogaApp.Models.Transaction", b =>
                {
                    b.HasOne("YogaApp.Models.Instructor", "Instructor")
                        .WithMany("Transactions")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_Transaction_Instructor");

                    b.HasOne("YogaApp.Models.Participant", "Participant")
                        .WithMany("Transactions")
                        .HasForeignKey("ParticipantId")
                        .HasConstraintName("FK_Transaction_Participant");

                    b.HasOne("YogaApp.Models.TransactionStatusLkp", "Tstatus")
                        .WithMany("Transactions")
                        .HasForeignKey("TstatusId")
                        .HasConstraintName("FK_Transaction_TransactionStatusLkp");

                    b.HasOne("YogaApp.Models.TransactionTypeLkp", "Type")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Transaction_TransactionTypeLkp");

                    b.Navigation("Instructor");

                    b.Navigation("Participant");

                    b.Navigation("Tstatus");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("YogaApp.Models.ApprovalStatusLkp", b =>
                {
                    b.Navigation("LocationInstructorLinks");
                });

            modelBuilder.Entity("YogaApp.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("YogaApp.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("YogaApp.Models.Course", b =>
                {
                    b.Navigation("ClassParticipantLinks");
                });

            modelBuilder.Entity("YogaApp.Models.CourseStatusLkp", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("YogaApp.Models.EnrollmentStatusLkp", b =>
                {
                    b.Navigation("ClassParticipantLinks");
                });

            modelBuilder.Entity("YogaApp.Models.Instructor", b =>
                {
                    b.Navigation("LocationInstructorLinks");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("YogaApp.Models.Location", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("LocationAdministratorLinks");

                    b.Navigation("LocationInstructorLinks");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("YogaApp.Models.Participant", b =>
                {
                    b.Navigation("ClassParticipantLinks");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("YogaApp.Models.TransactionStatusLkp", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("YogaApp.Models.TransactionTypeLkp", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
